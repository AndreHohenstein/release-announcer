name: Announce GitHub Release on X

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  announce:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Repo auschecken
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Python einrichten
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # 3Ô∏è‚É£ Abh√§ngigkeiten installieren
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4Ô∏è‚É£ Nach neuem Release suchen
      - name: Scan for new release info
        run: python src/scan_release.py
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      # 5Ô∏è‚É£ Posten oder Debug-Ausgabe
      - name: Post announcements to X
        if: ${{ hashFiles('state/pending.json') != '' }}
        run: |
          if [ -s state/pending.json ] && [ "$(jq length state/pending.json)" -gt 0 ]; then
            for i in $(jq -r 'range(length)' state/pending.json); do
              BODY=$(jq -r ".[$i].body" state/pending.json)
              URL=$(jq -r ".[$i].url" state/pending.json)

              if [ "$DEBUG_MODE" = "true" ]; then
                echo "üõ† Debug mode active ‚Äì would post: $BODY ($URL)"
              else
                echo "üì¢ Posting: $BODY"
                RELEASE_BODY="$BODY" RELEASE_URL="$URL" python src/post_to_x.py
              fi
            done
            echo "[]" > state/pending.json
          else
            echo "‚ÑπÔ∏è No pending releases found ‚Äì skipping post step."
          fi
        env:
          DEBUG_MODE: ${{ secrets.DEBUG_MODE }}
          X_API_KEY: ${{ secrets.X_API_KEY }}
          X_API_SECRET: ${{ secrets.X_API_SECRET }}
          X_ACCESS_TOKEN: ${{ secrets.X_ACCESS_TOKEN }}
          X_ACCESS_TOKEN_SECRET: ${{ secrets.X_ACCESS_TOKEN_SECRET }}
